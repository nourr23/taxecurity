// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  phone_number String   @unique
  email        String?  @unique
  hash         String
  firstName    String
  lastName     String
  age          Int?
  city         String?
  taxi_number  Int?

  alerts                  Alert[]
  followedBy              User[]            @relation("UserFollows")
  following               User[]            @relation("UserFollows")
  requestSent             Request[]         @relation("requestSent")
  requestReceived         Request[]         @relation("requestReceived")
  groups                  Group[]           @relation("groups")
  GroupCreated            Group[]           @relation("groupCreator")
  GroupInvitationSent     GroupInvitation[] @relation("groupInvitor")
  GroupInvitationRecieved GroupInvitation[] @relation("groupInvited")

  @@map("User")
}

model Alert {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String
  type      String?

  userId Int
  user   User @relation(fields: [userId], references: [id])

  @@map("Alert")
}

model Request {
  id         Int  @id @default(autoincrement())
  senderId   Int
  sender     User @relation("requestSent", fields: [senderId], references: [id])
  receiverId Int
  receiver   User @relation("requestReceived", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId])
  @@map("Request")
}

model Group {
  id                   Int               @id @default(autoincrement())
  name                 String
  creatorId            Int
  active               Boolean
  creator              User              @relation("groupCreator", fields: [creatorId], references: [id])
  users                User[]            @relation("groups")
  GroupInvitationsSent GroupInvitation[]

  @@map("Group")
}

model GroupInvitation {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creatorId Int
  creator   User @relation("groupInvitor", fields: [creatorId], references: [id])

  receiverId Int
  receiver   User @relation("groupInvited", fields: [receiverId], references: [id])

  groupId Int
  group   Group @relation(fields: [groupId], references: [id])

  @@unique([creatorId, receiverId, groupId])
  @@map("GroupInvitation")
}
